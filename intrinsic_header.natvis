<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="ref$&lt;str$&gt;">
    <AlternativeType Name="ref_mut$&lt;str$&gt;" />
    <AlternativeType Name="ptr_const$&lt;str$&gt;" />
    <AlternativeType Name="ptr_mut$&lt;str$&gt;" />

    <DisplayString>{(char*)data_ptr,[length]s8}</DisplayString>
    <StringView>(char*)data_ptr,[length]s8</StringView>
    <Expand>
      <Item Name="[len]" ExcludeView="simple">length</Item>
      <Synthetic Name="[chars]">
        <Expand>
          <ArrayItems>
            <Size>length</Size>
            <ValuePointer>data_ptr</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="ref$&lt;slice2$&lt;*&gt; &gt;">
    <AlternativeType Name="ref_mut$&lt;slice2$&lt;*&gt; &gt;" />
    <AlternativeType Name="ptr_const$&lt;slice2$&lt;*&gt; &gt;" />
    <AlternativeType Name="ptr_mut$&lt;slice2$&lt;*&gt; &gt;" />

    <DisplayString>{{ len={length} }}</DisplayString>
    <Expand>
      <Item Name="[len]" ExcludeView="simple">length</Item>
      <ArrayItems>
        <Size>length</Size>
        <ValuePointer>data_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;&gt;">
    <DisplayString>()</DisplayString>
  </Type>
  <Type Name="tuple$&lt;*&gt;">
    <DisplayString>({__0})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*&gt;">
    <DisplayString>({__0}, {__1})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
      <Item Name="[6]">__6</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
      <Item Name="[6]">__6</Item>
      <Item Name="[7]">__7</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
      <Item Name="[6]">__6</Item>
      <Item Name="[7]">__7</Item>
      <Item Name="[8]">__8</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9})</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
      <Item Name="[6]">__6</Item>
      <Item Name="[7]">__7</Item>
      <Item Name="[8]">__8</Item>
      <Item Name="[9]">__9</Item>
    </Expand>
  </Type>
  <Type Name="tuple$&lt;*,*,*,*,*,*,*,*,*,*,*&gt;">
    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9}, ...)</DisplayString>
    <Expand>
      <Item Name="[0]">__0</Item>
      <Item Name="[1]">__1</Item>
      <Item Name="[2]">__2</Item>
      <Item Name="[3]">__3</Item>
      <Item Name="[4]">__4</Item>
      <Item Name="[5]">__5</Item>
      <Item Name="[6]">__6</Item>
      <Item Name="[7]">__7</Item>
      <Item Name="[8]">__8</Item>
      <Item Name="[9]">__9</Item>
      <Synthetic Name="[...]"><DisplayString>...</DisplayString></Synthetic>
    </Expand>
  </Type>

  <!--
    This is the visualizer for all enums. It takes care of selecting the active variant.
    See `compiler\rustc_codegen_llvm\src\debuginfo\metadata\enums\cpp_like.rs` for more information.
  -->
  <Type Name="enum2$&lt;*&gt;">
    <!-- NOTE: That tag ranges can wrap around, in which case `end` is less than `begin` and we
               have to do a different check -->
    <Intrinsic Name="in_range" Expression="(begin &lt;= end) ? ((x &gt;= begin) &amp;&amp; (x &lt;= end)) : ((x &gt;= begin) || (x &lt;= end))">
      <Parameter Name="x" Type="unsigned __int64" />
      <Parameter Name="begin" Type="unsigned __int64" />
      <Parameter Name="end" Type="unsigned __int64" />
    </Intrinsic>

    <Intrinsic Name="eq128" Expression="(x_hi == y_hi) &amp;&amp; (x_lo == y_lo)">
      <Parameter Name="x_hi" Type="unsigned __int64" />
      <Parameter Name="x_lo" Type="unsigned __int64" />
      <Parameter Name="y_hi" Type="unsigned __int64" />
      <Parameter Name="y_lo" Type="unsigned __int64" />
    </Intrinsic>

    <Intrinsic Name="lt128" Expression="(x_hi &lt; y_hi) || ((x_hi == y_hi) &amp;&amp; (x_lo &lt; y_lo))">
      <Parameter Name="x_hi" Type="unsigned __int64" />
      <Parameter Name="x_lo" Type="unsigned __int64" />
      <Parameter Name="y_hi" Type="unsigned __int64" />
      <Parameter Name="y_lo" Type="unsigned __int64" />
    </Intrinsic>

    <Intrinsic Name="lt_or_eq128" Expression="((x_hi == y_hi) &amp;&amp; (x_lo == y_lo)) || lt128(x_hi, x_lo, y_hi, y_lo)">
      <Parameter Name="x_hi" Type="unsigned __int64" />
      <Parameter Name="x_lo" Type="unsigned __int64" />
      <Parameter Name="y_hi" Type="unsigned __int64" />
      <Parameter Name="y_lo" Type="unsigned __int64" />
    </Intrinsic>

    <!-- NOTE: That tag ranges can wrap around, in which case `end` is less than `begin` and we
               have to do a different check -->
    <Intrinsic Name="in_range128" Expression="(lt_or_eq128(begin_hi, begin_lo, end_hi, end_lo)) ?
                                              (lt_or_eq128(begin_hi, begin_lo, x_hi, x_lo) &amp;&amp; lt_or_eq128(x_hi, x_lo, end_hi, end_lo)) :
                                              (lt_or_eq128(begin_hi, begin_lo, x_hi, x_lo) || lt_or_eq128(x_hi, x_lo, end_hi, end_lo))">
      <Parameter Name="x_hi" Type="unsigned __int64" />
      <Parameter Name="x_lo" Type="unsigned __int64" />
      <Parameter Name="begin_hi" Type="unsigned __int64" />
      <Parameter Name="begin_lo" Type="unsigned __int64" />
      <Parameter Name="end_hi" Type="unsigned __int64" />
      <Parameter Name="end_lo" Type="unsigned __int64" />
    </Intrinsic>

